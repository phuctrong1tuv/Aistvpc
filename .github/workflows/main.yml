name: AI STV RDP

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'   # Tự khởi động lại mỗi 6 tiếng

jobs:
  windows-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create RDP user
        shell: powershell
        run: |
          $username = "AI_STV_$env:GITHUB_RUN_ID"
          $chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
          $password = -join ((1..12) | ForEach-Object { $chars[(Get-Random -Minimum 0 -Maximum $chars.Length)] })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
            $u = Get-LocalUser -Name $username
            $u | Set-LocalUser -Password $securePass
          } else {
            New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -Description "AI STV RDP user"
          }

          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Administrators" -Member $username -ErrorAction SilentlyContinue

          Write-Host "USERNAME=$username" >> $env:GITHUB_ENV
          Write-Host "PASSWORD=$password" >> $env:GITHUB_ENV

      - name: Enable RDP & firewall
        shell: powershell
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Restart-Service -Name TermService -Force
          netsh advfirewall firewall delete rule name="RDP-Allow" 2>$null
          netsh advfirewall firewall add rule name="RDP-Allow" dir=in action=allow protocol=TCP localport=3389

      - name: Install Tailscale
        shell: powershell
        run: |
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $path = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $path -UseBasicParsing
          Start-Process msiexec.exe -ArgumentList "/i", "`"$path`"", "/quiet", "/norestart" -Wait
          Remove-Item $path -Force

      - name: Start Tailscale and get IP
        shell: powershell
        run: |
          $auth = "${{ secrets.TAILSCALE_AUTH_KEY }}"
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$auth --hostname="AI-STV-$env:GITHUB_RUN_ID"
          Start-Sleep -Seconds 8
          $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
          if (-not $tsIP) {
            Start-Sleep -Seconds 6
            $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
          }
          if (-not $tsIP) { Write-Host "No Tailscale IP assigned"; exit 1 }
          Write-Host "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Send info to Firebase (create node)
        shell: powershell
        run: |
          $firebaseUrl = "https://sever-login-ae5cc-default-rtdb.firebaseio.com/rdp/$env:USERNAME.json"
          $expireAt = ([datetime]::UtcNow.AddMinutes(360)).ToString("o")
          $body = @{
            ip = $env:TAILSCALE_IP
            username = $env:USERNAME
            password = $env:PASSWORD
            status = "free"
            expire_at = $expireAt
          } | ConvertTo-Json
          Invoke-RestMethod -Uri $firebaseUrl -Method PUT -Body $body -ContentType "application/json"

      - name: Monitor RDP usage (update status every 60s, run 360 times = 6h)
        shell: powershell
        run: |
          $firebaseStatusUrl = "https://sever-login-ae5cc-default-rtdb.firebaseio.com/rdp/$env:USERNAME/status.json"
          $firebaseLastUrl = "https://sever-login-ae5cc-default-rtdb.firebaseio.com/rdp/$env:USERNAME/last_checked.json"
          $iterations = 360
          for ($i = 0; $i -lt $iterations; $i++) {
            try {
              $usersRaw = query user 2>&1
              $status = "free"
              if ($usersRaw -and $usersRaw -notmatch "No User exists") {
                $lines = $usersRaw -split "`n" | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne "" }
                foreach ($line in $lines) {
                  if ($line -match $env:USERNAME -and $line -match "Active") {
                    $status = "used"
                    break
                  }
                }
              }
              # update status and last_checked timestamp
              $now = ([datetime]::UtcNow).ToString("o")
              Invoke-RestMethod -Uri $firebaseStatusUrl -Method PUT -Body ('"' + $status + '"') -ContentType "application/json"
              Invoke-RestMethod -Uri $firebaseLastUrl -Method PUT -Body ('"' + $now + '"') -ContentType "application/json"
            } catch {
              Write-Host "Error updating Firebase: $_"
            }
            Start-Sleep -Seconds 60
          }

      - name: Remove expired RDP info from Firebase
        if: always()
        shell: powershell
        run: |
          $firebaseUrl = "https://sever-login-ae5cc-default-rtdb.firebaseio.com/rdp/$env:USERNAME.json"
          try {
            Invoke-RestMethod -Uri $firebaseUrl -Method DELETE
          } catch {
            Write-Host "Failed to delete Firebase node (may already be gone): $_"
          }

      - name: Auto restart next RDP
        if: always()
        shell: bash
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/main.yml/dispatches \
            -d '{"ref":"main"}'
