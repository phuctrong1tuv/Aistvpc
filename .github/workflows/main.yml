name: RDP

on:
  workflow_dispatch:
    inputs:
      random_code:
        description: 'Random Code'
        required: true
        type: string
      telegram_username:
        description: 'Telegram Username'
        required: true
        type: string
      telegram_id:
        description: 'Telegram ID'
        required: true
        type: string

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 355  # 5 ph√∫t tr∆∞·ªõc 6h ƒë·ªÉ x√≥a Firebase

    steps:
      - name: Configure RDP
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP-Allow" dir=in action=allow protocol=TCP localport=3389

      - name: Create RDP User with Simple Password First
        shell: pwsh
        run: |
          # T·∫°o user v·ªõi password ƒë∆°n gi·∫£n tr∆∞·ªõc
          $simplePassword = "TempPass123!"
          $securePass = ConvertTo-SecureString $simplePassword -AsPlainText -Force
          New-LocalUser -Name "AISTV" -Password $securePass -AccountNeverExpires -Description "RDP User"
          Add-LocalGroupMember -Group "Administrators" -Member "AISTV"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "AISTV"

          Write-Host "‚úÖ Created user with temporary password"

      - name: Change to Complex Password
        shell: pwsh
        run: |
          # T·∫°o password ph·ª©c t·∫°p v·ªõi 36 k√Ω t·ª±
          $upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
          $lower = "abcdefghijklmnopqrstuvwxyz"
          $number = "0123456789"
          $special = "!@#$%^&*"

          # T·∫°o password 36 k√Ω t·ª± ƒë√°p ·ª©ng complexity
          $complexPassword = ""
          $complexPassword += ($upper.ToCharArray() | Get-Random -Count 10) -join ''
          $complexPassword += ($lower.ToCharArray() | Get-Random -Count 10) -join ''
          $complexPassword += ($number.ToCharArray() | Get-Random -Count 10) -join ''
          $complexPassword += ($special.ToCharArray() | Get-Random -Count 6) -join ''

          # X√°o tr·ªôn password
          $complexPassword = ($complexPassword.ToCharArray() | Sort-Object {Get-Random}) -join ''

          # Th√™m ti·ªÅn t·ªë aistv_ v√†o ƒë·∫ßu password
          $finalPassword = "aistv_" + $complexPassword

          Write-Host "Generated Password Length: $($finalPassword.Length)"
          Write-Host "Password starts with: aistv_"

          # ƒê·ªïi password sang ph·ª©c t·∫°p
          $securePass = ConvertTo-SecureString $finalPassword -AsPlainText -Force
          Set-LocalUser -Name "AISTV" -Password $securePass

          echo "RDP_PASS=$finalPassword" >> $env:GITHUB_ENV
          Write-Host "‚úÖ Password changed to complex password"

      - name: Install Tailscale
        run: |
          $installerPath = Join-Path -Path $env:TEMP -ChildPath "tailscale.msi"
          Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi" -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          $tsExe = Join-Path -Path $env:ProgramFiles -ChildPath "Tailscale\\tailscale.exe"
          & $tsExe up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-rdp-${{ github.event.inputs.random_code }}

          $tsIP = $null
          $retries = 0
          while (-not ($tsIP -match '\\d+\\.\\d+\\.\\d+\\.\\d+') -and $retries < 12) {
              $tsIP = & $tsExe ip -4
              Start-Sleep -Seconds 5
              $retries++
          }

          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Save to Firebase
        shell: pwsh
        run: |
          $firebaseData = @{
            ip = $env:TAILSCALE_IP
            username = "AISTV"
            password = $env:RDP_PASS
            telegram_username = "${{ github.event.inputs.telegram_username }}"
            telegram_id = "${{ github.event.inputs.telegram_id }}"
            random_code = "${{ github.event.inputs.random_code }}"
            created_at = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            status = "active"
            expires_at = (Get-Date).AddHours(6).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          } | ConvertTo-Json

          $url = "https://sever-login-ae5cc-default-rtdb.firebaseio.com/vms/${{ github.event.inputs.random_code }}.json"
          Invoke-RestMethod -Uri $url -Method PUT -Body $firebaseData -ContentType "application/json"

      - name: Display RDP Info
        run: |
          Write-Host "‚úÖ RDP Info:"
          Write-Host "IP Address: $env:TAILSCALE_IP"
          Write-Host "Username: AISTV"
          Write-Host "Password: $env:RDP_PASS"
          Write-Host "Random Code: ${{ github.event.inputs.random_code }}"
          Write-Host "Expires at: $((Get-Date).AddHours(6).ToString('yyyy-MM-dd HH:mm:ss'))"

      - name: Wait for 355 minutes then cleanup Firebase
        shell: pwsh
        run: |
          # Ch·ªù 355 ph√∫t (5 ph√∫t tr∆∞·ªõc khi h·∫øt 6h)
          Start-Sleep -Seconds 21300

          # X√≥a th√¥ng tin tr√™n Firebase
          $url = "https://sever-login-ae5cc-default-rtdb.firebaseio.com/vms/${{ github.event.inputs.random_code }}.json"
          Invoke-RestMethod -Uri $url -Method DELETE

          Write-Host "‚úÖ ƒê√£ x√≥a th√¥ng tin m√°y ·∫£o kh·ªèi Firebase (M√£: ${{ github.event.inputs.random_code }})"

      - name: Maintain Connection (Final 5 minutes)
        run: |
          # Duy tr√¨ k·∫øt n·ªëi trong 5 ph√∫t cu·ªëi
          Start-Sleep -Seconds 300
          Write-Host "üïí M√°y ·∫£o ƒë√£ h·∫øt h·∫°n 6 gi·ªù"
