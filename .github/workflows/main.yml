name: AI STV Multi-User

on:
  workflow_dispatch:
    inputs:
      random_code:
        description: 'Random Code'
        required: true
        type: string
      telegram_username:
        description: 'Telegram Username'
        required: true
        type: string
      telegram_id:
        description: 'Telegram ID'
        required: true
        type: string

jobs:
  aistv-pc:
    runs-on: windows-latest
    timeout-minutes: 355

    steps:
      - name: 🔧 Configure RDP
        run: |
          Set-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          netsh advfirewall firewall add rule name="RDP-Allow" dir=in action=allow protocol=TCP localport=3389

      - name: 👤 Create RDP User with Secure Password
        shell: pwsh
        run: |
          # Define character sets
          $upper = [char[]](65..90)
          $lower = [char[]](97..122)
          $number = [char[]](48..57)
          $special = [char[]]'!@#$%^&*'

          # Build a password that guarantees complexity
          $passwordBuilder = New-Object System.Text.StringBuilder
          $passwordBuilder.Append(($upper | Get-Random -Count 4))
          $passwordBuilder.Append(($lower | Get-Random -Count 4))
          $passwordBuilder.Append(($number | Get-Random -Count 4))
          $passwordBuilder.Append(($special | Get-Random -Count 4))

          # Shuffle the characters to make the password random
          $password = $passwordBuilder.ToString().ToCharArray() | Get-Random -Count $passwordBuilder.Length | Out-String -NoNewline

          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "AISTV" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "AISTV"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "AISTV"

          echo "RDP_PASS=$password" >> $env:GITHUB_ENV
          Write-Host "✅ Đã tạo user AISTV"

      - name: 📥 Download and Setup PageKite
        shell: pwsh
        run: |
          Write-Host "📥 Đang tải PageKite..."
          Invoke-WebRequest -Uri "https://pagekite.net/pk/pagekite.py" -OutFile "pagekite.py"

          # Tạo subdomain duy nhất cho mỗi VM
          $subdomain = "${{ github.event.inputs.random_code }}.aistv"
          echo "PAGEKITE_SUBDOMAIN=$subdomain" >> $env:GITHUB_ENV
          Write-Host "✅ Subdomain: $subdomain"

      - name: 🌐 Start PageKite Tunnel for RDP
        shell: pwsh
        run: |
          Write-Host "🚀 Đang khởi động PageKite tunnel..."
          $subdomain = "$env:PAGEKITE_SUBDOMAIN"

          # Chạy PageKite cho RDP port 3389
          Start-Process -FilePath "python" -ArgumentList "pagekite.py", "--clean", "--frontend=pagekite.me:443", "--service_on=rdp:$subdomain.pagekite.me:localhost:3389:$env:PAGEKITE_SECRET" -WindowStyle Hidden
          Start-Sleep -Seconds 10

          $publicHost = "$subdomain.pagekite.me"
          echo "RDP_HOST=$publicHost" >> $env:GITHUB_ENV
          Write-Host "✅ PageKite Public Host: $publicHost"

      - name: 💾 Save to Firebase
        shell: pwsh
        run: |
          $firebaseData = @{
            host = $env:RDP_HOST
            username = "AISTV"
            password = $env:RDP_PASS
            telegram_username = "${{ github.event.inputs.telegram_username }}"
            telegram_id = "${{ github.event.inputs.telegram_id }}"
            random_code = "${{ github.event.inputs.random_code }}"
            created_at = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            status = "active"
            expires_at = (Get-Date).AddHours(6).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            connection_type = "pagekite"
          } | ConvertTo-Json

          $url = "$env:FIREBASE_URL/vms/${{ github.event.inputs.random_code }}.json"
          Write-Host "💾 Đang lưu thông tin lên Firebase..."
          try {
              $response = Invoke-RestMethod -Uri $url -Method PUT -Body $firebaseData -ContentType "application/json"
              Write-Host "✅ Đã lưu thông tin lên Firebase"
          } catch {
              Write-Host "❌ Lỗi khi lưu Firebase: $($_.Exception.Message)"
          }

      - name: 📋 Display RDP Info
        run: |
          Write-Host "=========================================="
          Write-Host "✅ THÔNG TIN MÁY ẢO ĐÃ SẴN SÀNG"
          Write-Host "=========================================="
          Write-Host "🌐 Public Host: $env:RDP_HOST"
          Write-Host "👤 Username: AISTV"
          Write-Host "🔑 Password: $env:RDP_PASS"
          Write-Host "📋 Random Code: ${{ github.event.inputs.random_code }}"
          Write-Host "⏱️ Thời gian sử dụng: 6 giờ"
          Write-Host "🔧 Hướng dẫn: Mở Remote Desktop → nhập: $env:RDP_HOST"
          Write-Host "=========================================="

      - name: 🔄 Keep Tunnel Alive
        shell: pwsh
        run: |
          Write-Host "🔄 Đang duy trì kết nối PageKite..."
          $startTime = Get-Date
          $timeoutMinutes = 350

          while ($true) {
              $elapsed = (Get-Date) - $startTime
              $minutesLeft = $timeoutMinutes - $elapsed.TotalMinutes

              if ($minutesLeft -le 0) {
                  Write-Host "⏰ Đã hết thời gian, thoát..."
                  break
              }

              Write-Host "⏰ Thời gian còn lại: $([math]::Round($minutesLeft, 1)) phút"
              Start-Sleep -Seconds 60
          }

      - name: 🧹 Cleanup Firebase
        if: always()
        shell: pwsh
        run: |
          Write-Host "🧹 Đang dọn dẹp Firebase..."
          $url = "$env:FIREBASE_URL/vms/${{ github.event.inputs.random_code }}.json"
          try {
              Invoke-RestMethod -Uri $url -Method DELETE
              Write-Host "✅ Đã xóa thông tin VM khỏi Firebase"
          } catch {
              Write-Host "⚠️ Không thể xóa Firebase: $($_.Exception.Message)"
          }
