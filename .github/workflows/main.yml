name: Persistent RDP (‚àû Auto-Restore & Same IP/Password)

on:
  workflow_dispatch:  # B·∫•m "Run workflow" th·ªß c√¥ng ƒë·ªÉ kh·ªüi ch·∫°y l·∫°i n·∫øu mu·ªën

jobs:
  rdp-server:
    name: Start RDP on Self-Hosted Runner (Unlimited Time)
    runs-on: self-hosted  # üî• D√πng m√°y ·∫£o ho·∫∑c VPS c·ªßa b·∫°n (kh√¥ng gi·ªõi h·∫°n 6h)

    steps:
      - name: üîπ Enable RDP Access
        shell: powershell
        run: |
          Write-Host "üü¢ Enabling RDP..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0
          netsh advfirewall firewall add rule name="RDP-Allow" dir=in action=allow protocol=TCP localport=3389
          Restart-Service TermService -ErrorAction SilentlyContinue
          Write-Host "‚úÖ RDP Enabled Successfully!"

      - name: üîπ Create or Restore RDP User
        shell: powershell
        run: |
          $passPath = "C:\backup\rdp-pass.txt"
          if (!(Test-Path "C:\backup")) { New-Item -ItemType Directory -Path "C:\backup" | Out-Null }
          if (Test-Path $passPath) {
              $password = Get-Content $passPath
              Write-Host "üîÅ Reusing existing password."
          } else {
              $chars = ([char[]](33..126))
              $password = -join (1..16 | ForEach-Object { $chars | Get-Random })
              Set-Content -Path $passPath -Value $password
              Write-Host "üîê Created new password and saved."
          }

          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name "RDP" -Password $securePass -FullName "RDP User" -Description "Persistent RDP Account"
              Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
              Write-Host "‚úÖ Created new RDP user."
          } else {
              Set-LocalUser -Name "RDP" -Password $securePass
              Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP" -ErrorAction SilentlyContinue
              Write-Host "‚ôªÔ∏è Updated existing user password."
          }

          Write-Host ""
          Write-Host "==============================="
          Write-Host "RDP Info:"
          Write-Host "Username: RDP"
          Write-Host "Password: $password"
          Write-Host "==============================="

      - name: üßπ Cleanup & Optimize
        shell: powershell
        run: |
          Write-Host "üßπ Starting cleanup and optimization..."
          Try {
              # Stop heavy services
              foreach ($svc in @("SysMain","DiagTrack","WSearch")) {
                  if (Get-Service $svc -ErrorAction SilentlyContinue) {
                      Stop-Service $svc -Force -ErrorAction SilentlyContinue
                      Set-Service $svc -StartupType Disabled
                      Write-Host " - Disabled $svc"
                  }
              }

              # Delete temp files
              Get-ChildItem "C:\Windows\Temp" -Recurse -ErrorAction SilentlyContinue | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
              $temp = "$env:TEMP"
              Get-ChildItem $temp -Recurse -ErrorAction SilentlyContinue | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
              Clear-RecycleBin -Force -ErrorAction SilentlyContinue

              # Disable hibernation
              powercfg -h off | Out-Null

              # Optimize disk
              Optimize-Volume -DriveLetter C -ReTrim -ErrorAction SilentlyContinue | Out-Null
              Optimize-Volume -DriveLetter C -Defrag -ErrorAction SilentlyContinue | Out-Null

              # Performance mode
              powercfg /SETACTIVE SCHEME_MIN
              Write-Host " - Set power plan: High Performance"
          } Catch {
              Write-Warning "Cleanup encountered issues: $_"
          }

          Write-Host "‚úÖ Cleanup completed."

      - name: üß≠ Keep Alive (Prevent Idle Timeout)
        shell: powershell
        run: |
          Write-Host "üîÑ Runner is now persistent. Use CTRL+C to stop manually."
          while ($true) {
              Write-Host "$(Get-Date -Format 'HH:mm:ss') | Runner heartbeat..."
              Start-Sleep -Seconds 600
          }
