name: RDP

on:
  workflow_dispatch:
    inputs:
      random_code:
        description: 'Random Code'
        required: true
        type: string
      telegram_username:
        description: 'Telegram Username'
        required: true
        type: string
      telegram_id:
        description: 'Telegram ID'
        required: true
        type: string

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Configure RDP
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP-Allow" dir=in action=allow protocol=TCP localport=3389

      - name: Create RDP User with Secure Password
        shell: pwsh
        run: |
          # Define character sets
          $upper = [char[]](65..90)
          $lower = [char[]](97..122)
          $number = [char[]](48..57)
          $special = [char[]]'!@#$%^&*'

          # Build a password that guarantees complexity
          $passwordBuilder = New-Object System.Text.StringBuilder
          $passwordBuilder.Append(($upper | Get-Random -Count 4))
          $passwordBuilder.Append(($lower | Get-Random -Count 4))
          $passwordBuilder.Append(($number | Get-Random -Count 4))
          $passwordBuilder.Append(($special | Get-Random -Count 4))

          # Shuffle the characters to make the password random
          $password = $passwordBuilder.ToString().ToCharArray() | Get-Random -Count $passwordBuilder.Length | Out-String -NoNewline

          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"

          echo "RDP_PASS=$password" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          $installerPath = Join-Path -Path $env:TEMP -ChildPath "tailscale.msi"
          Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi" -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          $tsExe = Join-Path -Path $env:ProgramFiles -ChildPath "Tailscale\\tailscale.exe"
          & $tsExe up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-rdp-${{ github.run_id }}

          $tsIP = $null
          $retries = 0
          while (-not ($tsIP -match '\\d+\\.\\d+\\.\\d+\\.\\d+') -and $retries -lt 12) {
              $tsIP = & $tsExe ip -4
              Start-Sleep -Seconds 5
              $retries++
          }

          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Save to Firebase
        shell: pwsh
        run: |
          $firebaseData = @{
            ip = $env:TAILSCALE_IP
            username = "RDP"
            password = $env:RDP_PASS
            telegram_username = "${{ github.event.inputs.telegram_username }}"
            telegram_id = "${{ github.event.inputs.telegram_id }}"
            random_code = "${{ github.event.inputs.random_code }}"
            created_at = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            status = "active"
          } | ConvertTo-Json

          $url = "https://sever-login-ae5cc-default-rtdb.firebaseio.com/vms/${{ github.event.inputs.random_code }}.json"
          Invoke-RestMethod -Uri $url -Method PUT -Body $firebaseData -ContentType "application/json"

      - name: Display RDP Info
        run: |
          Write-Host "âœ… RDP Info:"
          Write-Host "IP Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $env:RDP_PASS"
          Write-Host "Random Code: ${{ github.event.inputs.random_code }}"

      - name: Maintain Connection
        run: |
          while ($true) {
              Start-Sleep -Seconds 300
          }
