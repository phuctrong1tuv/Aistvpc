name: AI STV 

on:
  workflow_dispatch:

env:
  POOL_FILE: aistv_pool.json
  SLOT_NAME: aistv-01   # đổi tên slot nếu bạn có nhiều file workflow

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Mark slot in-use (commit pool)
        run: |
          python - <<'PY'
import json, os
from datetime import datetime, timedelta
pool_file = os.environ.get("POOL_FILE")
slot_name = os.environ.get("SLOT_NAME")
pool = json.load(open(pool_file))
for s in pool["slots"]:
    if s["name"] == slot_name:
        s["status"]="in_use"
        s["owner"]=f"workflow:{os.getenv('GITHUB_RUN_ID')}"
        s["expires_at"]=(datetime.utcnow()+timedelta(minutes=300)).isoformat()+"Z"
        break
open(pool_file,"w").write(json.dumps(pool,indent=2))
os.system('git config user.email "actions@github.com"')
os.system('git config user.name "github-actions[bot]"')
os.system(f'git add {pool_file} && git commit -m "Mark {slot_name} in_use by run ${{GITHUB_RUN_ID}}" || true')
PY

      - name: Create rotating RDP user (AI STV) and random password
        shell: powershell
        run: |
          $username = "AI_STV_${env:GITHUB_RUN_ID}"
          $chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{};:,.<>/?"
          $rnd = -join ((1..20) | ForEach-Object { $chars[(Get-Random -Minimum 0 -Maximum $chars.Length)] })
          $securePass = ConvertTo-SecureString $rnd -AsPlainText -Force

          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
            $u = Get-LocalUser -Name $username
            $u | Set-LocalUser -Password $securePass
          } else {
            New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -Description "AI STV RDP user"
          }
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Administrators" -Member $username -ErrorAction SilentlyContinue

          Write-Host "USERNAME=$username" >> $env:GITHUB_ENV
          Write-Host "PASSWORD=$rnd" >> $env:GITHUB_ENV

      - name: Enable RDP & firewall rules
        shell: powershell
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Restart-Service -Name TermService -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale" || Write-Host "no existing rule"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

      - name: Install Tailscale (if needed)
        shell: powershell
        run: |
          $tsPath = "$env:TEMP\tailscale.msi"
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          Invoke-WebRequest -Uri $url -OutFile $tsPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$tsPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $tsPath -Force

      - name: Start Tailscale and get IP
        shell: powershell
        run: |
          $auth = "${{ secrets.TAILSCALE_AUTH_KEY }}"
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$auth --hostname=gh-runner-$env:GITHUB_RUN_ID
          $tsIP = $null
          for ($i=0; $i -lt 12; $i++) {
            $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
            if ($tsIP) { break }
            Start-Sleep -Seconds 5
          }
          if (-not $tsIP) { Write-Error "No Tailscale IP"; exit 1 }
          Write-Host "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Print nice table (IP / user / password / remaining) and save to file
        shell: powershell
        run: |
          function Get-Remaining {
            param($poolFile, $slotName)
            try {
              $json = Get-Content $poolFile -Raw | ConvertFrom-Json
              $s = $json.slots | Where-Object { $_.name -eq $slotName }
              if (-not $s -or -not $s.expires_at) { return $null }
              $exp = [datetime]::Parse($s.expires_at)
              $now = [datetime]::UtcNow
              $ts = $exp - $now
              if ($ts.TotalSeconds -le 0) { return [TimeSpan]::Zero }
              return $ts
            } catch { return $null }
          }

          $ip = $env:TAILSCALE_IP
          $user = $env:USERNAME
          $pass = $env:PASSWORD
          $pool_file = "${{ env.POOL_FILE }}"
          $slot = "${{ env.SLOT_NAME }}"

          $rem = Get-Remaining -poolFile $pool_file -slotName $slot
          if ($rem -eq $null) {
            $remStr = "unknown"
          } elseif ($rem.TotalSeconds -le 0) {
            $remStr = "expired"
          } else {
            $hours = [int]$rem.TotalHours
            $minutes = $rem.Minutes
            $seconds = $rem.Seconds
            $remStr = ("{0:00}h:{1:00}m:{2:00}s" -f $hours, $minutes, $seconds)
          }

          $txt = @"
+--------------------------------------+
|            AI STV - RDP              |
+--------------------------------------+
| IP        : $ip
| User      : $user
| Pass      : $pass
| Remaining : $remStr
+--------------------------------------+
"@
          Write-Host $txt
          $out = "aistv_rdp_info_${env:GITHUB_RUN_ID}.txt"
          $txt | Out-File -FilePath $out -Encoding utf8
          Write-Host "ARTIFACT_FILE=$out" >> $env:GITHUB_ENV

      - name: Upload RDP info as artifact
        uses: actions/upload-artifact@v4
        with:
          name: aistv-rdp-info-${{ github.run_id }}
          path: ${{ env.ARTIFACT_FILE }}

      - name: Heartbeat loop (display remaining time every 30s)
        shell: powershell
        run: |
          $pool_file = "${{ env.POOL_FILE }}"
          $slot = "${{ env.SLOT_NAME }}"

          function Get-Remaining {
            param($poolFile, $slotName)
            try {
              $json = Get-Content $poolFile -Raw | ConvertFrom-Json
              $s = $json.slots | Where-Object { $_.name -eq $slotName }
              if (-not $s -or -not $s.expires_at) { return $null }
              $exp = [datetime]::Parse($s.expires_at)
              $now = [datetime]::UtcNow
              $ts = $exp - $now
              if ($ts.TotalSeconds -le 0) { return [TimeSpan]::Zero }
              return $ts
            } catch { return $null }
          }

          while ($true) {
            $rem = Get-Remaining -poolFile $pool_file -slotName $slot
            if ($null -eq $rem) {
              Write-Host "[$(Get-Date -Format o)] Remaining: unknown (pool missing or malformed). Exiting loop."
              break
            }
            if ($rem.TotalSeconds -le 0) {
              Write-Host "[$(Get-Date -Format o)] Slot expired. Exiting loop."
              break
            }
            $hours = [int]$rem.TotalHours
            $minutes = $rem.Minutes
            $seconds = $rem.Seconds
            $remStr = ("{0:00}h:{1:00}m:{2:00}s" -f $hours, $minutes, $seconds)
            Write-Host "[$(Get-Date -Format o)] RDP Alive - IP: $env:TAILSCALE_IP User: $env:USERNAME Remaining: $remStr"
            Start-Sleep -Seconds 30
          }
          Write-Host "Heartbeat loop ended."

      - name: Release slot (mark free) - always runs
        if: always()
        run: |
          python - <<'PY'
import json, os
pool_path = os.environ.get("POOL_FILE")
slot = os.environ.get("SLOT_NAME")
try:
    pool = json.load(open(pool_path))
    for s in pool['slots']:
        if s['name'] == slot:
            s['status'] = 'free'
            s['owner'] = None
            s['expires_at'] = None
            break
    open(pool_path,'w').write(json.dumps(pool,indent=2))
    os.system('git config user.email "actions@github.com"')
    os.system('git config user.name "github-actions[bot]"')
    os.system(f'git add {pool_path} && git commit -m "Release {slot} from run ${{GITHUB_RUN_ID}}" || true')
except Exception as e:
    print("Release error:", e)
PY
