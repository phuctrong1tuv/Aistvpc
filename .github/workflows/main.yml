name: AI STV

on:
  workflow_dispatch:
    inputs:
      random_code:
        description: 'Random Code'
        required: true
        type: string
      telegram_username:
        description: 'Telegram Username'
        required: true
        type: string
      telegram_id:
        description: 'Telegram ID'
        required: true
        type: string

jobs:
  aistv-pc:
    runs-on: windows-latest
    timeout-minutes: 355

    steps:
      - name: 🔧 Configure RDP
        run: |
          Set-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          netsh advfirewall firewall add rule name="RDP-Allow" dir=in action=allow protocol=TCP localport=3389

      - name: 👤 Create RDP User with Secure Password
        shell: pwsh
        run: |
          # Tạo password mạnh
          Add-Type -AssemblyName System.Web
          $password = [System.Web.Security.Membership]::GeneratePassword(12, 3)

          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "AISTV" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "AISTV"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "AISTV"

          echo "RDP_PASS=$password" >> $env:GITHUB_ENV
          Write-Host "✅ Đã tạo user AISTV"

      - name: 📥 Install Node.js for Localtunnel
        shell: pwsh
        run: |
          Write-Host "📥 Đang cài đặt Node.js..."
          Invoke-WebRequest -Uri "https://nodejs.org/dist/v18.18.0/node-v18.18.0-x64.msi" -OutFile "nodejs.msi"
          Start-Process msiexec.exe -ArgumentList "/i", "nodejs.msi", "/quiet", "/norestart" -Wait
          Remove-Item "nodejs.msi" -Force
          Write-Host "✅ Đã cài đặt Node.js"

      - name: 🌐 Install and Start Localtunnel
        shell: pwsh
        run: |
          Write-Host "🌐 Đang cài đặt localtunnel..."
          npm install -g localtunnel

          Write-Host "🚀 Đang khởi động localtunnel..."
          # Chạy localtunnel cho port 3389
          $ltProcess = Start-Process -FilePath "cmd.exe" -ArgumentList "/c", "lt --port 3389" -PassThru -RedirectStandardOutput "lt_output.txt" -RedirectStandardError "lt_error.txt"
          Start-Sleep -Seconds 10

          # Đọc output để lấy URL
          $ltOutput = Get-Content "lt_output.txt" -Tail 10
          Write-Host "Localtunnel Output: $ltOutput"

          # Tìm URL trong output
          $publicUrl = $ltOutput | Where-Object { $_ -match 'https://[a-z0-9-]+\.loca\.lt' } | Select-Object -First 1

          if ($publicUrl) {
              echo "PUBLIC_URL=$publicUrl" >> $env:GITHUB_ENV
              Write-Host "✅ Localtunnel Public URL: $publicUrl"
          } else {
              Write-Host "❌ Không thể lấy URL từ localtunnel"
              # Fallback: tạo subdomain random
              $randomSubdomain = -join ((65..90) + (97..122) | Get-Random -Count 8 | % {[char]$_})
              $publicUrl = "https://$randomSubdomain.loca.lt"
              echo "PUBLIC_URL=$publicUrl" >> $env:GITHUB_ENV
              Write-Host "🔄 Sử dụng URL dự phòng: $publicUrl"
          }

      - name: 💾 Save to Firebase
        shell: pwsh
        run: |
          $firebaseData = @{
            public_url = $env:PUBLIC_URL
            username = "AISTV"
            password = $env:RDP_PASS
            telegram_username = "${{ github.event.inputs.telegram_username }}"
            telegram_id = "${{ github.event.inputs.telegram_id }}"
            random_code = "${{ github.event.inputs.random_code }}"
            created_at = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            status = "active"
            expires_at = (Get-Date).AddHours(6).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            connection_type = "localtunnel"
            note = "Kết nối: mở Remote Desktop → nhập $env:PUBLIC_URL thay vì IP"
          } | ConvertTo-Json

          $url = "https://sever-login-ae5cc-default-rtdb.firebaseio.com/vms/${{ github.event.inputs.random_code }}.json"
          Write-Host "💾 Đang lưu thông tin lên Firebase..."
          try {
              $response = Invoke-RestMethod -Uri $url -Method PUT -Body $firebaseData -ContentType "application/json"
              Write-Host "✅ Đã lưu thông tin lên Firebase"
          } catch {
              Write-Host "❌ Lỗi khi lưu Firebase: $($_.Exception.Message)"
          }

      - name: 📋 Display RDP Info
        run: |
          Write-Host "=========================================="
          Write-Host "✅ THÔNG TIN MÁY ẢO ĐÃ SẴN SÀNG"
          Write-Host "=========================================="
          Write-Host "🌐 Public URL: $env:PUBLIC_URL"
          Write-Host "👤 Username: AISTV"
          Write-Host "🔑 Password: $env:RDP_PASS"
          Write-Host "📋 Random Code: ${{ github.event.inputs.random_code }}"
          Write-Host "⏱️ Thời gian sử dụng: 6 giờ"
          Write-Host "🔧 Hướng dẫn: Mở Remote Desktop → nhập URL trên"
          Write-Host "=========================================="

      - name: 🔄 Keep Tunnel Alive
        shell: pwsh
        run: |
          Write-Host "🔄 Đang duy trì kết nối localtunnel..."
          $startTime = Get-Date
          $timeoutMinutes = 350

          while ($true) {
              $elapsed = (Get-Date) - $startTime
              $minutesLeft = $timeoutMinutes - $elapsed.TotalMinutes

              if ($minutesLeft -le 0) {
                  Write-Host "⏰ Đã hết thời gian, thoát..."
                  break
              }

              # Kiểm tra localtunnel vẫn chạy
              $ltProcess = Get-Process -Name "node" -ErrorAction SilentlyContinue
              if (-not $ltProcess) {
                  Write-Host "🔄 Khởi động lại localtunnel..."
                  Start-Process -FilePath "cmd.exe" -ArgumentList "/c", "lt --port 3389" -PassThru
              }

              Write-Host "⏰ Thời gian còn lại: $([math]::Round($minutesLeft, 1)) phút"
              Start-Sleep -Seconds 60
          }

      - name: 🧹 Cleanup Firebase
        if: always()
        shell: pwsh
        run: |
          Write-Host "🧹 Đang dọn dẹp Firebase..."
          $url = "https://sever-login-ae5cc-default-rtdb.firebaseio.com/vms/${{ github.event.inputs.random_code }}.json"
          try {
              $response = Invoke-RestMethod -Uri $url -Method DELETE
              Write-Host "✅ Đã xóa thông tin VM khỏi Firebase"
          } catch {
              Write-Host "⚠️ Không thể xóa Firebase: $($_.Exception.Message)"
          }
