name: RDP

on:
  workflow_dispatch:
    inputs:
      random_code:
        description: 'Random Code'
        required: true
        type: string
      telegram_username:
        description: 'Telegram Username'
        required: true
        type: string
      telegram_id:
        description: 'Telegram ID'
        required: true
        type: string

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 355  # Giảm 5 phút để đảm bảo xóa Firebase trước khi GitHub hủy

    steps:
      - name: Configure RDP
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP-Allow" dir=in action=allow protocol=TCP localport=3389

      - name: Create RDP User with Secure Password
        shell: pwsh
        run: |
          # Define character sets
          $upper = [char[]](65..90)
          $lower = [char[]](97..122)
          $number = [char[]](48..57)
          $special = [char[]]'!@#$%^&*'

          # Build a password that guarantees complexity
          $passwordBuilder = New-Object System.Text.StringBuilder
          $passwordBuilder.Append(($upper | Get-Random -Count 4))
          $passwordBuilder.Append(($lower | Get-Random -Count 4))
          $passwordBuilder.Append(($number | Get-Random -Count 4))
          $passwordBuilder.Append(($special | Get-Random -Count 4))

          # Shuffle the characters to make the password random
          $password = $passwordBuilder.ToString().ToCharArray() | Get-Random -Count $passwordBuilder.Length | Out-String -NoNewline

          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "AISTV" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "AISTV"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "AISTV"

          echo "RDP_PASS=$password" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          $installerPath = Join-Path -Path $env:TEMP -ChildPath "tailscale.msi"
          Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi" -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        shell: pwsh
        run: |
          $tsExe = Join-Path -Path $env:ProgramFiles -ChildPath "Tailscale\\tailscale.exe"
          & $tsExe up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=gh-rdp-$env:GITHUB_RUN_ID

          $tsIP = $null
          $retries = 0
          $maxRetries = 12
          while ((-not ($tsIP -match '^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$')) -and ($retries -lt $maxRetries)) {
              $tsIP = & $tsExe ip -4
              if (-not ($tsIP -match '^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$')) {
                  Write-Host "Chờ Tailscale IP... ($retries/$maxRetries)"
                  Start-Sleep -Seconds 5
                  $retries++
              }
          }

          if (-not ($tsIP -match '^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$')) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Host "✅ Tailscale IP: $tsIP"

      - name: Save to Firebase
        shell: pwsh
        run: |
          $firebaseData = @{
            ip = $env:TAILSCALE_IP
            username = "AISTV"
            password = $env:RDP_PASS
            telegram_username = "${{ github.event.inputs.telegram_username }}"
            telegram_id = "${{ github.event.inputs.telegram_id }}"
            random_code = "${{ github.event.inputs.random_code }}"
            created_at = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            status = "active"
            expires_at = (Get-Date).AddHours(6).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          } | ConvertTo-Json

          $url = "$env:FIREBASE_URL/vms/${{ github.event.inputs.random_code }}.json"
          Write-Host "Đang lưu thông tin lên Firebase..."
          try {
              $response = Invoke-RestMethod -Uri $url -Method PUT -Body $firebaseData -ContentType "application/json"
              Write-Host "✅ Đã lưu thông tin lên Firebase"
          } catch {
              Write-Host "❌ Lỗi khi lưu Firebase: $($_.Exception.Message)"
          }

      - name: Display RDP Info
        run: |
          Write-Host "=========================================="
          Write-Host "✅ THÔNG TIN MÁY ẢO ĐÃ SẴN SÀNG"
          Write-Host "=========================================="
          Write-Host "🖥️ IP Address: $env:TAILSCALE_IP"
          Write-Host "👤 Username: AISTV"
          Write-Host "🔑 Password: $env:RDP_PASS"
          Write-Host "📋 Random Code: ${{ github.event.inputs.random_code }}"
          Write-Host "⏱️ Thời gian sử dụng: 6 giờ"
          Write-Host "=========================================="

      - name: Setup Environment Variables
        run: |
          echo "TAILSCALE_AUTH_KEY=${{ secrets.TAILSCALE_AUTH_KEY }}" >> $env:GITHUB_ENV
          echo "FIREBASE_URL=${{ secrets.FIREBASE_URL }}" >> $env:GITHUB_ENV

      - name: Cleanup Firebase before timeout
        if: always()
        shell: pwsh
        run: |
          Write-Host "🔄 Đang dọn dẹp Firebase..."
          $url = "$env:FIREBASE_URL/vms/${{ github.event.inputs.random_code }}.json"
          try {
              $response = Invoke-RestMethod -Uri $url -Method DELETE
              Write-Host "✅ Đã xóa thông tin VM khỏi Firebase"
          } catch {
              Write-Host "⚠️ Không thể xóa Firebase: $($_.Exception.Message)"
          }

      - name: Maintain Connection
        shell: pwsh
        run: |
          Write-Host "🔄 Đang duy trì kết nối..."
          $startTime = Get-Date
          $timeoutMinutes = 350

          while ($true) {
              $elapsed = (Get-Date) - $startTime
              $minutesLeft = $timeoutMinutes - $elapsed.TotalMinutes

              if ($minutesLeft -le 0) {
                  Write-Host "⏰ Đã hết thời gian, thoát..."
                  break
              }

              Write-Host "⏰ Thời gian còn lại: $([math]::Round($minutesLeft, 1)) phút"
              Start-Sleep -Seconds 30
          }
